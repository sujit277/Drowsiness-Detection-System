OBJECTIVE OF MY PROJECT--    This Project is Based on a Machine Learning Model whose objective is to build a                                                          drowsiness detection system that will detect that a person’s eyes are close or Open.                                                          This system will alert the driver when drowsiness is detected it will raise An Alarm.


ABOUT MY PROJECT--                 We have developed the model that is used to Detect person eyes are close or open
                                                         Problem Statement: --
                                                         Creating the model that can detect person eyes are open or Close

                                                         Problem solving: --
                                                         (1) create the dataset
                                                         (2) Build the model--
                                                                          Step 1 – Take image as input from a camera.

                                                                          Step 2 – Detect the face in the image and create a Region of Interest (ROI).

                                                                          Step 3 – Detect the eyes from ROI and feed it to the classifier.

                                                                          Step 4 – Classifier will categorize whether eyes are open or closed.

                                                                          Step 5 – Calculate score to check whether the person is drowsy.

                                                         (3) Train the model
                                                         (4) Make predictions

                                                         1. Create the Dataset--
                                                                                            The dataset used for this model is created by us. To create the                                                          dataset, we wrote a script that captures eyes from a camera and stores in our local                                                         disk. We separated them into their respective labels ‘Open’ or ‘Closed’. The data was                                                         manually cleaned by removing the unwanted images which were not necessary for                                                         building the model. The data comprises around 7000 images of people’s eyes under                                                         different lighting conditions.


                                                        2. Building the ML Model--
                                                                                                    In this Part we Develop our ML Model that is Based on                                                         Deep Learning and Neural Networks.
                                                        The model we used is built with Keras using Convolutional Neural Networks (CNN).                                                         A convolutional neural network is a special type of deep neural network which                                                                     performs extremely well for image classification purposes. A CNN basically consists of                                                         an input layer, an output layer and a hidden layer which can have multiple numbers of                                                         layers. A convolution operation is performed on these layers using a filter that                                                         performs 2D matrix multiplication on the layer and filter.

     Lets Expain How our Algorithm Works--

   Step 1 – Take Image as Input from a Camera

With a webcam, we will take images as input. So to access the webcam, we made an infinite loop that will capture each frame. We use the method provided by OpenCV, cv2.VideoCapture(0) to access the camera and set the capture object (cap). cap.read() will read each frame and we store the image in a frame variable.

   Step 2 – Detect Face in the Image and Create a Region of Interest (ROI)

To detect the face in the image, we need to first convert the image into grayscale as the OpenCV algorithm for object detection takes gray images in the input. We don’t need color information to detect the objects. We will be using haar cascade classifier to detect faces. This line is used to set our classifier face = cv2.CascadeClassifier(‘ path to our haar cascade xml file’). Then we perform the detection using faces = face.detectMultiScale(gray). It returns an array of detections with x,y coordinates, and height, the width of the boundary box of the object. Now we can iterate over the faces and draw boundary boxes for each face.

   Step 3 – Detect the eyes from ROI and feed it to the classifier

The same procedure to detect faces is used to detect eyes. First, we set the cascade classifier for eyes in leye and reye respectively then detect the eyes using left_eye = leye.detectMultiScale(gray). Now we need to extract only the eyes data from the full image. This can be achieved by extracting the boundary box of the eye and then we can pull out the eye image from the frame with this code.

l_eye = frame[ y : y+h, x : x+w ]
l_eye only contains the image data of the eye. This will be fed into our CNN classifier which will predict if eyes are open or closed. Similarly, we will be extracting the right eye into r_eye.

  Step 4 – Classifier will Categorize whether Eyes are Open or Closed

We are using CNN classifier for predicting the eye status. To feed our image into the model, we need to perform certain operations because the model needs the correct dimensions to start with. First, we convert the color image into grayscale using r_eye = cv2.cvtColor(r_eye, cv2.COLOR_BGR2GRAY). Then, we resize the image to 24*24 pixels as our model was trained on 24*24 pixel images cv2.resize(r_eye, (24,24)). We normalize our data for better convergence r_eye = r_eye/255 (All values will be between 0-1). Expand the dimensions to feed into our classifier. We loaded our model using model = load_model(‘models/cnnCat2.h5’) . Now we predict each eye with our model
lpred = model.predict_classes(l_eye). If the value of lpred[0] = 1, it states that eyes are open, if value of lpred[0] = 0 then, it states that eyes are closed.

   Step 5 – Calculate Score to Check whether Person is Drowsy

The score is basically a value we will use to determine how long the person has closed his eyes. So if both eyes are closed, we will keep on increasing score and when eyes are open, we decrease the score. We are drawing the result on the screen using cv2.putText() function which will display real time status of the person.

cv2.putText(frame, “Open”, (10, height-20), font, 1, (255,255,255), 1, cv2.LINE_AA )
A threshold is defined for example if score becomes greater than 15 that means the person’s eyes are closed for a long period of time. This is when we beep the alarm using sound.play()
   


  

  

 




